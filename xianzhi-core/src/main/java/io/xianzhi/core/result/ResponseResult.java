/*
 *  Copyright 2025 XianZhi Group .
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package io.xianzhi.core.result;

import io.xianzhi.core.code.CommonCode;
import io.xianzhi.core.utils.TraceIdUtils;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;

import java.io.Serializable;

/**
 * Response Result Class
 * This class encapsulates the result of an API response, providing a structured way to return
 * essential information such as a status code, a descriptive message, optional data, and a trace
 * identifier. It implements the Result interface to ensure consistency with the system's response
 * handling mechanisms and is serializable for easy transmission or storage. The class is designed
 * to be flexible, supporting both successful and failed responses with or without accompanying data.
 *
 * @author Max
 * @since 1.0.0
 */
@Slf4j
@Getter
public class ResponseResult<R> implements Result, Serializable {

    /**
     * Returned Data
     * This field contains the data to be returned as part of the API response. It is generic (type R),
     * allowing the class to accommodate any type of data, such as a single object, a list, or null
     * if no data is included. This field is populated based on the outcome of the operation.
     */
    private final R data;

    /**
     * Trace ID of This Request
     * This field holds a unique identifier for tracking the request throughout the system. The trace
     * ID is typically generated by a utility (e.g., TraceIdUtils) and is useful for logging, debugging,
     * or correlating requests across different services or components.
     */
    private final String traceId;

    /**
     * Custom Status Code
     * This field stores the status code of the response, which indicates the outcome of the operation
     * (e.g., success, failure, or a specific error). It is derived from a Result object and adheres
     * to a custom-defined format for consistency across the system.
     */
    private final String code;

    /**
     * Custom Message
     * This field contains a human-readable message describing the result of the operation. It provides
     * additional context, such as a success confirmation or an error explanation, and is sourced from
     * a Result object to maintain uniformity in messaging.
     */
    private final String message;

    /**
     * Constructor
     * This constructor initializes a ResponseResult object using a Result object and optional data.
     * It extracts the status code and message from the provided Result instance, assigns the data
     * as-is, and generates a trace ID for the request. This approach ensures that all response
     * results are fully populated with necessary information.
     *
     * @param result The Result object providing the status code and message for this response.
     * @param data   The data to be included in the response, which can be null if no data is returned.
     */
    public ResponseResult(Result result, R data) {
        this.code = result.code();
        this.message = result.message();
        this.data = data;
        this.traceId = TraceIdUtils.getTraceId();
    }

    /**
     * Operation Successful
     * This static method creates a ResponseResult instance representing a successful operation
     * without any accompanying data. It uses the predefined SUCCESS status from CommonCode,
     * providing a quick and standardized way to indicate success.
     *
     * @param <T> The generic type parameter for the data, allowing flexibility in the return type.
     * @return A ResponseResult instance with a success status, no data, and a generated trace ID.
     */
    public static <T> ResponseResult<T> success() {
        return new ResponseResult<>(CommonCode.SUCCESS, null);
    }

    /**
     * Operation Successful
     * This static method creates a ResponseResult instance representing a successful operation
     * with accompanying data. It uses the predefined SUCCESS status from CommonCode and includes
     * the provided data, offering a convenient way to return both a success indicator and results.
     *
     * @param data The data to be included in the successful response.
     * @param <T>  The generic type parameter for the data, matching the type of the provided data.
     * @return A ResponseResult instance with a success status, the specified data, and a trace ID.
     */
    public static <T> ResponseResult<T> success(T data) {
        return new ResponseResult<>(CommonCode.SUCCESS, data);
    }

    /**
     * Operation Failed
     * This static method creates a ResponseResult instance representing a failed operation without
     * any data. It takes a Result object to specify the failure details (e.g., error code and message),
     * allowing for flexible error reporting based on predefined or custom failure conditions.
     *
     * @param result The Result object defining the failure status code and message.
     * @param <T>    The generic type parameter for the data, allowing flexibility in the return type.
     * @return A ResponseResult instance with a failure status, no data, and a generated trace ID.
     */
    public static <T> ResponseResult<T> fail(Result result) {
        return new ResponseResult<>(result, null);
    }

    /**
     * Get Custom Status Code
     * This method retrieves the status code associated with the response result. The status code
     * is returned as a string, allowing for flexible, user-defined values that can represent
     * different outcomes of an operation. Developers can use this code to indicate whether the
     * operation succeeded or to identify a specific type of error, enabling precise error
     * handling and reporting.
     *
     * @return A string representing the custom status code defined for this response result.
     */
    @Override
    public String code() {
        return this.code;
    }

    /**
     * Get Custom Message
     * This method retrieves the message associated with the response result. The message is
     * returned as a string and provides a human-readable explanation of the operation's outcome.
     * It is intended to give the user or caller clear feedback, such as confirming a successful
     * action or detailing the reason for a failure, enhancing the usability and transparency
     * of the system.
     *
     * @return A string containing the custom message describing the result or error of the operation.
     */
    @Override
    public String message() {
        return this.message;
    }
}
